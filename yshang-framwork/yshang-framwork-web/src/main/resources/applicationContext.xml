<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>


	<!-- 加载配置文件等同于util:properties，但是util:properties，不支持设置编码 <util:properties 
		id="webConf" location="classpath:/webConf.properties" /> 使用方法 :jsp <spring:eval 
		expression="@webConf['admin.title']" /> JAVA private @Value("#{webConf.getProperty('admin.title')}") 
		String title; -->
	<bean id="webConf"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location">
			<value>classpath:/webConf.properties</value>
		</property>
		<property name="fileEncoding">
			<value>utf-8</value>
		</property>
	</bean>

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean id="SpringContextHolder" class="com.yshanginfo.framwork.core.utils.SpringContextHolder" />


	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.yshanginfo.**.web,com.yshanginfo.**.service">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>


	<!-- jpa Entity Factory 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.yshanginfo.**.entiy" />

		<property name="persistenceUnitName" value="${jpa.persistenceUnitName}" />
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="${jpa.generateDdl}" />
				<property name="database" value="${jpa.database}" />
				<property name="databasePlatform" value="${jpa.databasePlatform}" />
				<property name="showSql" value="${jpa.showSql}" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<property name="jpaPropertyMap">
			<map>
				<!-- 使用自定义的validator进行jsr303验证 -->
				<entry key="javax.persistence.validation.factory" value-ref="validator" />
				<!-- jsr303验证模式 因为其要么验证 要么不验证 不能按照规则走 所以此处禁用 -->
				<!-- #http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html -->
				<entry key="javax.persistence.validation.mode" value="NONE" />

				<!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
				<entry key="hibernate.archive.autodetection" value="class" />
				<!-- 不检查@NamedQuery -->
				<entry key="hibernate.query.startup_check" value="false" />

				<entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}" />
				<entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}" />
				<entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}" />
				<entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}" />
				<entry key="hibernate.bytecode.use_reflection_optimizer"
					value="${hibernate.bytecode.use_reflection_optimizer}" />
				<entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}" />
				<entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}" />
				<entry key="hibernate.cache.region.factory_class" value="${hibernate.cache.region.factory_class}" />
				<entry key="net.sf.ehcache.configurationResourceName" value="${net.sf.ehcache.configurationResourceName}" />
				<entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}" />

			</map>
		</property>
	</bean>


	<!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
	<jpa:repositories base-package="com.yshanginfo.**.repository"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />



	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>


	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 配置那些类的方法进行事务管理，当前com.sy.crm.service包中的子包， 类中所有方法需要，还需要参考tx:advice的设置 -->
	<aop:config>

		<!-- 在Controller里注入写日志的方法，注意如果需要前后台分离则需要写两个注入点和Advice -->
		<aop:pointcut id="adminController"
			expression="execution(public String com.yshanginfo.*..*.web.*.*(..))
			 and !execution(* toString()) and
			  !execution(* ...*$$EnhancerByCGLIB*.*(..))" />
		<aop:advisor advice-ref="adminVisitLog" pointcut-ref="adminController" />

	</aop:config>

	<!-- 配置adminVisitLog，如果需要 -->
	<bean id="adminVisitLog" class="com.yshanginfo.framwork.core.web.ControllerLoggerAdvice">
        <!-- 打印日志的logger 的名字 -->
        <property name="loggerName" value="adminLog" />
        <!-- 在日志里打印登录的用户信息：
                              如果是后台则填写shiro则会打印shior里保存的帐号信息。
                                如果是要获取session里的值，则直接填写session的key，如，session里保存用户名的key为user则 principal填写user-->
        <property name="principal" value="shiro" />
		<property name="returnBodyMaxLength" value="50" /><!-- 打印日志时打印Controller返回的 
			String最大长度 -->
	</bean>


	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- hibernate validator -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- production环境 -->
	<beans profile="production">
		<context:property-placeholder
			ignore-resource-not-found="true" location="classpath*:/application.properties" />
		<!-- 数据源 -->
		<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<!-- Connection Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />  <!-- 连接池的最大数据库连接数。设为0表示无限制。 -->
			<property name="initialSize" value="${jdbc.pool.initialSize}" />  <!-- 初始化连接数量 -->
			<property name="maxWait" value="10000" />  <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。 -->

			<property name="minEvictableIdleTimeMillis" value="30000" />  <!--连接的超时时间，默认为半小时。 -->
			<property name="minIdle" value="10" />  <!-- 最小等待连接中的数量,设 0 为没有限制 -->
			<property name="testWhileIdle" value="true" />  <!--默认值是false,当连接池中的空闲连接是否有效 -->
			<property name="testOnBorrow" value="true" /> <!-- 默认值是true，当从连接池取连接时，验证这个连接是否有效 -->
			<property name="testOnReturn" value="false" />  <!--默认值是flase,当从把该连接放回到连接池的时，验证这个连接是 -->
			<property name="validationQuery" value="${jdbc.pool.validationQuery}" />  <!--一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql -->
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" /><!-- 
				有两个含义：1) Destroy线程会检测连接的间隔时间, 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
			<property name="filters" value="wall,stat,slf4j" />  <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
			<property name="removeAbandoned" value="true" />  <!-- 是否自动回收超时连接 -->
			<property name="removeAbandonedTimeout" value="1800" />  <!--自我中断时间秒 -->
			<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
			<property name="poolPreparedStatements" value="${jdbc.pool.poolPreparedStatements}" /> <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<property name="timeBetweenLogStatsMillis" value="300000" /><!-- 
				例如配置每5分钟输出一次统计日志 -->
		</bean>

	</beans>

	<!-- local development环境 -->
	<beans profile="development">
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/application.properties,
          			  classpath*:/application.development.properties" />

		<!-- 数据源 -->
		<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<!-- Connection Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />  <!-- 连接池的最大数据库连接数。设为0表示无限制。 -->
			<property name="initialSize" value="${jdbc.pool.initialSize}" />  <!-- 初始化连接数量 -->
			<property name="maxWait" value="10000" />  <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。 -->

			<property name="minEvictableIdleTimeMillis" value="30000" />  <!--连接的超时时间，默认为半小时。 -->
			<property name="minIdle" value="10" />  <!-- 最小等待连接中的数量,设 0 为没有限制 -->
			<property name="testWhileIdle" value="true" />  <!--默认值是false,当连接池中的空闲连接是否有效 -->
			<property name="testOnBorrow" value="true" /> <!-- 默认值是true，当从连接池取连接时，验证这个连接是否有效 -->
			<property name="testOnReturn" value="false" />  <!--默认值是flase,当从把该连接放回到连接池的时，验证这个连接是 -->
			<property name="validationQuery" value="${jdbc.pool.validationQuery}" />  <!--一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql -->
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" /><!-- 
				有两个含义：1) Destroy线程会检测连接的间隔时间, 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
			<property name="filters" value="wall,stat,slf4j" />  <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
			<property name="removeAbandoned" value="true" />  <!-- 是否自动回收超时连接 -->
			<property name="removeAbandonedTimeout" value="1800" />  <!--自我中断时间秒 -->
			<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
			<property name="poolPreparedStatements" value="${jdbc.pool.poolPreparedStatements}" /> <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<property name="timeBetweenLogStatsMillis" value="300000" /><!-- 
				例如配置每5分钟输出一次统计日志 -->
		</bean>


	</beans>

	<!-- functional test环境 -->
	<beans profile="functional">
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:/application.properties,
          			  classpath*:/application.functional.properties,
          			  classpath*:/application.functional-local.properties" />

		<!-- 数据源 -->
		<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<!-- Connection Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />  <!-- 连接池的最大数据库连接数。设为0表示无限制。 -->
			<property name="initialSize" value="${jdbc.pool.initialSize}" />  <!-- 初始化连接数量 -->
			<property name="maxWait" value="10000" />  <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。 -->

			<property name="minEvictableIdleTimeMillis" value="30000" />  <!--连接的超时时间，默认为半小时。 -->
			<property name="minIdle" value="10" />  <!-- 最小等待连接中的数量,设 0 为没有限制 -->
			<property name="testWhileIdle" value="true" />  <!--默认值是false,当连接池中的空闲连接是否有效 -->
			<property name="testOnBorrow" value="true" /> <!-- 默认值是true，当从连接池取连接时，验证这个连接是否有效 -->
			<property name="testOnReturn" value="false" />  <!--默认值是flase,当从把该连接放回到连接池的时，验证这个连接是 -->
			<property name="validationQuery" value="${jdbc.pool.validationQuery}" />  <!--一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql -->
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" /><!-- 
				有两个含义：1) Destroy线程会检测连接的间隔时间, 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
			<property name="filters" value="wall,stat,slf4j" />  <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
			<property name="removeAbandoned" value="true" />  <!-- 是否自动回收超时连接 -->
			<property name="removeAbandonedTimeout" value="1800" />  <!--自我中断时间秒 -->
			<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
			<property name="poolPreparedStatements" value="${jdbc.pool.poolPreparedStatements}" /> <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<property name="timeBetweenLogStatsMillis" value="300000" /><!-- 
				例如配置每5分钟输出一次统计日志 -->
		</bean>



		<!-- 初始化数据结构 -->
		<jdbc:initialize-database data-source="dataSource"
			ignore-failures="ALL">
			<jdbc:script location="classpath:sql/${db.type}/schema.sql" />
		</jdbc:initialize-database>

	</beans>

</beans>